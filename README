.
├── eventCustomer.h		//事件执行/消费者中心
├── eventDispatch.h		//事件分发中心/调度器
├── main.cpp			//主测试
├── observer.h			//观察者接口->提供dispatch接口，供productevent使用
├── productEvent.h		//事件封装，消息合成事件
├── product.h			//消息产生，使用单一调用工厂实现
├── README
└── trace.h				//trace跟踪调试程序

0 directories, 8 files

运行实例：
注册一个读事件执行者
注册一个写事件执行者

=============模拟产生事件===============
随机产生一个事件：事件类型 3
事件发生。触发器工作....
未注册执行者

=============模拟产生事件===============
随机产生一个事件：事件类型 2
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型2

=============模拟产生事件===============
随机产生一个事件：事件类型 1
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型1

=============模拟产生事件===============
随机产生一个事件：事件类型 3
事件发生。触发器工作....
未注册执行者

=============模拟产生事件===============
随机产生一个事件：事件类型 1
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型1

=============模拟产生事件===============
随机产生一个事件：事件类型 3
事件发生。触发器工作....
未注册执行者

=============模拟产生事件===============
随机产生一个事件：事件类型 2
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型2

=============模拟产生事件===============
随机产生一个事件：事件类型 0
事件发生。触发器工作....
未注册执行者

=============模拟产生事件===============
随机产生一个事件：事件类型 1
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型1

=============模拟产生事件===============
随机产生一个事件：事件类型 1
事件发生。触发器工作....
read执行者：执行[ 写事件] 事件类型1
